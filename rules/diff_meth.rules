####################################################################
#
# Rules to be applied after mapping reads with Bismark - diff. methylation part

#(#TODO: propably will merged with post_mapping.rules??)

# ====================================================

# These rules generate a report, such that the user can 
# see wich commands generated the output and 
# can recreate data with modified parameters if not happy with the results.
# 
# 

#
#
# Dependencies:
# - python-rp2, pandoc, methylKit(r), DT(r), genomation(r),
#   annotationhub(r), rtracklayer(r)
# 

####################################################################


"""
This is how the minimal config file should look like, in order to inlcude this snakefile


{
    "reference": {
        "ce10": ["/home/agosdsc/Base/Genomes/ce10/"]
    },
    "samples": {
        "A":["A"],
        "B":["B"]
    },
    "units": {
        "A":
            ["path/to/A_R1.fastq.gz", "path/to/A_R2.fastq.gz"],
        "B":
            ["path/to/B.fastq.gz"]
    },
    "treatment": {
        "A": "1",
        "B": "0"
    },
    "params_bam_methCall": {
        "mincov": 10,
        "minqual": 20
    } 
    "diff_meth_pairs":{
        "1" : "0"
    }
}
"""

import json, os

## show base dir
# print(workflow.basedir)

## show working dir
# print(os.getcwd())

## show current dir
# print(srcdir(""))

#---------------------------------     DEFINE PATHS AND FILE NAMES:  ----------------------------------

#--- we need to define some directory variables to use rmarkdown from snakemake
#---                !!!! IMPORTANT !!!!
#--- ! paths inside input and output should be relative
#--- ! if params are passed to Rmarkdown document, paths to files or folders should be absolute   


BASEDIR = workflow.basedir + "/"                    #--- the base dir (where Snakefile is) 
WORKDIR = os.getcwd() + "/"                         #--- current work dir (important for rmarkdown)

SCRIPTDIR   = BASEDIR + "scripts/"                  #--- scripts dir (relative to snakefile)
TEMPLATEDIR = BASEDIR + "report_templates/"         #--- template dir (relative to snakefile)

#--- pathout is ignored, since all paths are relative from either base or workdir
## notes:
## maybe set pathout by setting working dir in snakemake call
# PATHOUT      = config["PATHOUT"]
LOGS        = config["LOG"] 



#--- the in/output directories can be renamed easily
#--- path to bam files is absolute, such that I can run workflow in any other directory
BAMDIR      = config["DIR_sorted"]  # BASEDIR + "test_dataset/sample_bam_files/" 


#--- output paths have to be relative to working directory, 
#--- such that I can run workflow in any other directory and
#--- it always sets up the same structure
METHCALLDIR = "methylation_calls/"
SEGDIR      = "segmentation/"
ANNODIR     = "annotation/"
DIFFMETHDIR = 'differential_methylation/'


SAMPLE_IDS = list(config["SAMPLES"].keys())
SAMPLE_TREATMENTS = [config["SAMPLES"][s]["Treatment"] for s in SAMPLE_IDS]


# For only CpG context
def diffmeth_input_function(wc):

  treatments = wc.treatment
  treatments = treatments.split("_")

  inputfiles = []
  for t in treatments:
    indx = SAMPLE_TREATMENTS.index(t)
    sampleid = SAMPLE_IDS[indx]
    
    fqname = config["SAMPLES"][sampleid]["fastq_name"]
    if len(fqname)==1:
      inputfile=[METHCALLDIR + fqname[0]+"_se_bt2.deduped.sorted_CpG.txt"]
    elif len(fqname)==2:
      inputfile=[METHCALLDIR + fqname[0]+"_val_1_bt2.deduped.sorted_CpG.txt"]

    inputfiles.append(inputfile)
  
  inputfiles = list(sum(inputfiles, []))
  return(inputfiles)



## Differential methylation
rule diffmeth:
    ## paths inside input and output should be relative
    input:  
        template    = TEMPLATEDIR + "diffmeth.report.Rmd",
        inputfiles  = diffmeth_input_function
    output: 
        report      = DIFFMETHDIR + "{treatment}.sorted_diffmeth.nb.html",
        grfile      = DIFFMETHDIR + "{treatment}.sorted_diffmeth.RData",
        bedfile     = DIFFMETHDIR + "{treatment}.sorted_diffmeth.bed"
    params:
        workdir     = WORKDIR,
        inputfiles  = diffmeth_input_function,
        sampleids   = lambda wc: [SAMPLE_IDS[SAMPLE_TREATMENTS.index(t)] for t in wc.treatment.split("_")],
        grdata      = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmeth.RData",
        grdata_hyper  = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmethhyper.RData",
        grdata_hypo   = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmethhypo.RData",
        outBed      = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmeth.bed",
        assembly    = config["GENOME_VERSION"],
        treatment   = lambda wc: wc.treatment.split("_"),
        mincov      = int(config["bam_methCall_args_mincov"]), 
        context     = "CpG",
        cores       = int(config["diffmeth_cores"])
        
    log:
        DIFFMETHDIR+"{treatment}.sorted_diffmeth.log"
    script:
        SCRIPTDIR + "report_functions.R" 


## Annotation with gene features
rule annotation_diffmeth:
    input:  
        template    = TEMPLATEDIR + "annotation.report.diff.meth.Rmd",
        bedfile     = DIFFMETHDIR + "{treatment}.sorted_diffmeth.bed",
        refgenes    = ANNODIR + "refseq.genes.{assembly}.bed"
    output: 
        report      = ANNODIR + "{treatment}.sorted_{assembly}_annotation.diff.meth.nb.html"
    params:
        inBed       = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmeth.bed",
        assembly    = config["GENOME_VERSION"],
        refseqfile  = WORKDIR + ANNODIR + "refseq.genes.{assembly}.bed",
        grFile      = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmeth.RData",
        grFile_hyper= WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmethhyper.RData",
        grFile_hypo = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmethhypo.RData",
        ideoDMC_script = SCRIPTDIR + "ideoDMC.R"
    log:
        ANNODIR + "{treatment}.sorted_{assembly}_annotation.diff.meth.log"
    script:
        SCRIPTDIR + "report_functions.R"   
        







